EMAcross<- Op(BAC)-EMA5
EMAcross
MACD<-MACD(Op(BAC),fast = 12, slow = 26, signal = 9)
MACD
MACDsignal<-MACD[,2]
SMI<-SMI(Op(BAC),n=13,slow=25,fast=2,signal=9)
SMI<-SMI[,1]
PriceChange<- Cl(BAC) - Op(BAC)
Class<-ifelse(PriceChange>0,"UP","DOWN")
DataSet<-data.frame(RSI3,EMAcross,MACDsignal,SMI,Class)
colnames(DataSet)<-c("RSI3","EMAcross","MACDsignal","Stochastic","Class")
DataSet<-DataSet[-c(1:33),]
TrainingSet<-DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet<-DataSet[313:469,]
#And leave out 1/3 data to test our strategy
DecisionTree<-rpart(Class~RSI3+EMAcross+MACDsignal+Stochastic,data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
plotcp(DecisionTree,upper="splits")
PrunedDecisionTree<-prune(DecisionTree,cp=0.0272109)
prp(PrunedDecisionTree, type=2, extra=8)
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[,5],dnn=list('predicted','actual'))
setwd("/Users/apple/Desktop/582/582_3")
library(quantmod)
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate)
RSI3<-RSI(Op(BAC), n= 3)
EMA5<-EMA(Op(BAC),n=5)
MACD<-MACD(Op(BAC),fast = 12, slow = 26, signal = 9)
MACDsignal<-MACD[,2]
SMI<-SMI(Op(BAC),n=13,slow=25,fast=2,signal=9)
SMI<-SMI[,1]
PriceChange<- Cl(BAC) - Op(BAC)
Class<-ifelse(PriceChange>0,"UP","DOWN")
DataSet<-data.frame(RSI3,EMAcross,MACDsignal,SMI,Class)
colnames(DataSet)<-c("RSI3","EMAcross","MACDsignal","Stochastic","Class")
DataSet<-DataSet[-c(1:33),]
TrainingSet<-DataSet[1:312,]
TestSet<-DataSet[313:469,]
DecisionTree<-rpart(Class~RSI3+EMAcross+MACDsignal+Stochastic,data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
plotcp(DecisionTree,upper="splits")
PrunedDecisionTree<-prune(DecisionTree,cp=0.0272109)
prp(PrunedDecisionTree, type=2, extra=8)
Op(BAC
Op(BAC
Op(BAC)
MACD<-MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal<-MACD[,2]
View(MACD)
View(MACDsignal)
MACD
ROC(Op(PEP),n=1)
ROC(Op(PEP),n=1, type = c( "discrete"))
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
ADX(HLC(PEP))
ADX <- ADX(HLC(PEP), n = 14)
ADX <- ADX[4]
head(ADX)
ADX <- ADX(HLC(PEP), n = 14)
ADX <- ADX[, 4]
head(ADX)
ADX
# 8
ADX7 <- ADX(HLC(PEP), n = 7)
ADX7 <- ADX7[, 4]
#Calculate a 7-period Average Direction Index (ADX)
# 9
ADX14 <- ADX(HLC(PEP), n = 14)
ADX14 <- ADX14[, 4]
#Calculate a 14-period Average Direction Index (ADX)
ADX7
ADX14
Volume <- Vo(PEP)
View(Volume)
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange>0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
EMA15 <- EMA(Op(PEP), n = 15)
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange>0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
# 8
ADX7 <- ADX(HLC(PEP), n = 7)
ADX7 <- ADX7[, 4]
#Calculate a 7-period Average Direction Index (ADX)
# 9
ADX14 <- ADX(HLC(PEP), n = 14)
ADX14 <- ADX14[, 4]
#Calculate a 14-period Average Direction Index (ADX)
# 10
Volume <- Vo(PEP)
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange>0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
View(DataSet)
EMA5
setwd("/Users/apple/Desktop/582/582_3")
library(quantmod)
library(rpart)
library(rpart.plot)
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate)
# 1
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
# 8
ADX7 <- ADX(HLC(PEP), n = 7)
ADX7 <- ADX7[, 4]
#Calculate a 7-period Average Direction Index (ADX)
# 9
ADX14 <- ADX(HLC(PEP), n = 14)
ADX14 <- ADX14[, 4]
#Calculate a 14-period Average Direction Index (ADX)
# 10
Volume <- Vo(PEP)
#Get volume
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange>0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
View(DataSet)
RSI3
RSI3 <- RSI(Op(PEP), n = 3)
View(RSI3)
colnames(DataSet)<-c("MACDsignal", "SMI", "EMA5", "EMA15", "RSI3", "RSI10",
"ROC", "ADX7", "ADX14", "Volume", "Class")
View(DataSet)
View(DataSet)
DataSet1<-DataSet[-c(1:20),]
View(DataSet1)
DataSet1<-DataSet[-c(1:30),]
View(DataSet1)
DataSet <- DataSet[-c(1:33),]
DecisionTree<-rpart(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet, cp=.001)
View(DataSet)
TrainingSet <- DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet <- DataSet[313:469,]
DecisionTree<-rpart(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
plotcp(DecisionTree,upper="splits")
PrunedDecisionTree <- prune(DecisionTree, cp = 0.039683)
prp(PrunedDecisionTree, type=2, extra=8)
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[,5],dnn=list('predicted','actual'))
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[,11],dnn=list('predicted','actual'))
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[, 11],dnn=list('predicted','actual'))
(49+34)/(49+42+32+34)
setwd("/Users/apple/Desktop/582/582_3")
library(quantmod)
library(rpart)
library(rpart.plot)
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate) # Get the stock symbol
# 1
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
# 8
ADX7 <- ADX(HLC(PEP), n = 7)
ADX7 <- ADX7[, 4]
#Calculate a 7-period Average Direction Index (ADX)
# 9
ADX14 <- ADX(HLC(PEP), n = 14)
ADX14 <- ADX14[, 4]
#Calculate a 14-period Average Direction Index (ADX)
# 10
Volume <- Vo(PEP)
#Get volume
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange > 0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
#Create our data set
colnames(DataSet)<-c("MACDsignal", "SMI", "EMA5", "EMA15", "RSI3", "RSI10",
"ROC", "ADX7", "ADX14", "Volume", "Class")
#Name the columns
DataSet <- DataSet[-c(1:33),]
#Get rid of the data where the indicators are being calculated
TrainingSet <- DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet <- DataSet[313:469,]
#And leave out 1/3 data to test our strategy
DecisionTree<-rpart(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
plotcp(DecisionTree,upper="splits")
PrunedDecisionTree <- prune(DecisionTree, cp = 0.039683)
# Selecting the complexity parameter (cp) that has the lowest cross-validated error (xerror)
prp(PrunedDecisionTree, type=2, extra=8)
setwd("/Users/apple/Desktop/582/582_3")
library(quantmod)
library(rpart)
library(rpart.plot)
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate) # Get the stock symbol
# 1
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
# 8
ADX7 <- ADX(HLC(PEP), n = 7)
ADX7 <- ADX7[, 4]
#Calculate a 7-period Average Direction Index (ADX)
# 9
ADX14 <- ADX(HLC(PEP), n = 14)
ADX14 <- ADX14[, 4]
#Calculate a 14-period Average Direction Index (ADX)
# 10
Volume <- Vo(PEP)
#Get volume
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange > 0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, ADX7, ADX14, Volume, Class)
#Create our data set
colnames(DataSet)<-c("MACDsignal", "SMI", "EMA5", "EMA15", "RSI3", "RSI10",
"ROC", "ADX7", "ADX14", "Volume", "Class")
#Name the columns
DataSet <- DataSet[-c(1:33),]
#Get rid of the data where the indicators are being calculated
TrainingSet <- DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet <- DataSet[313:469,]
glm.fit <- glm(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet, family=binomial)
glm.probs <- predict(glm.fit, data=TestSet, type ="response")
glm.probs <- predict(glm.fit, data=TestSet, type ="response")
glm.probs <- predict(glm.fit, data=TestSet)
, type ="response"
, type ="response"
glm.probs <- predict(glm.fit, data=TestSet, type ="response")
glm.probs <- predict(glm.fit, TestSet, type ="response")
View(Class)
glm.pred=rep("DOWN", 157)
glm.pred[glm.probs >.5]="UP"
table(glm.pred, Class[313:469,])
Class[313:469,]
mean(glm.pred == default)
mean(glm.pred == Class[313:469,])
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
library (ISLR)
library (MASS)
library (class)
lda.fit <- lda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
lda.fit
plot(lda.fit)
lda.pred <- predict(lda.fit, TestSet)
lda.pred <- predict(lda.fit, TestSet)
lda.class <- lda.pred$class
lda.class
table(lda.class, Class[313:469,])
mean(lda.class == Class[313:469,])
table(lda.class, Class[313:469,])
mean(lda.class == Class[313:469,])
mean(glm.pred == Class[313:469,])
table(glm.pred, Class[313:469,])
qda.fit <- qda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
qda.fit
qda.probs <- predict(qda.fit, TestSet)
qda.class <- qda.pred$class
table(qda.class, default)
qda.fit <- qda(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC + ADX7 + ADX14 + Volume, data=TrainingSet)
qda.fit
qda.probs <- predict(qda.fit, TestSet)
qda.class <- qda.pred$class
qda.class <- qda.probs$class
table(qda.class, default)
table(qda.class, Class[313:469,])
mean(qda.class == Class[313:469,])
74/157
table(glm.pred, Class[313:469,])
table(lda.class, Class[313:469,])
table(qda.class, Class[313:469,])
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate) # Get the stock symbol
# 1
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange > 0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
ROC, Class)
#Create our data set
colnames(DataSet)<-c("MACDsignal", "SMI", "EMA5", "EMA15", "RSI3", "RSI10",
"ROC", "Class")
#Name the columns
DataSet <- DataSet[-c(1:33),]
#Get rid of the data where the indicators are being calculated
TrainingSet <- DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet <- DataSet[313:469,]
#And leave out 1/3 data to test our strategy
DecisionTree<-rpart(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10 +
ROC, data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
#shows the minimal cp for each trees of each size.
plotcp(DecisionTree,upper="splits")
PrunedDecisionTree <- prune(DecisionTree, cp = 0.0396825)
prp(PrunedDecisionTree, type=2, extra=8)
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[, 8],dnn=list('predicted','actual'))
startDate = as.Date("2012-01-01")
endDate = as.Date("2014-01-01")
getSymbols("PEP", from = startDate, to = endDate) # Get the stock symbol
# 1
MACD <- MACD(Op(PEP),fast = 12, slow = 26, signal = 9)
#Calculate a MACD with standard parameters
MACDsignal <- MACD[, 2]
#Grab just the signal line to use as our indicator.
# 2
SMI <- SMI(Op(PEP),n=13,slow=25,fast=2,signal=9)
#Stochastic Oscillator with standard parameters
SMI <- SMI[, 1]
#Grab just the oscillator to use as our indicator
# 3
EMA5 <- EMA(Op(PEP), n = 5)
#Calculate a 5-period exponential moving average (EMA)
# 4
EMA15 <- EMA(Op(PEP), n = 15)
#Calculate a 15-period exponential moving average (EMA)
# 5
RSI3 <- RSI(Op(PEP), n = 3)
#Calculate a 3-period relative strength index (RSI) off the open price
# 6
RSI10 <- RSI(Op(PEP), n = 10)
#Calculate a 10-period relative strength index (RSI) off the open price
# 7
ROC <- ROC(Op(PEP), n=1, type = c( "discrete"))
#Calculate Rate Of Change (ROC)
#Then calculate the variable we are looking to predict and build our data sets.
PriceChange <- Cl(PEP) - Op(PEP)
#Calculate the difference between the close price and open price
Class <- ifelse(PriceChange > 0,"UP","DOWN")
#Create a binary classification variable, the variable we are trying to predict.
DataSet <- data.frame(MACDsignal, SMI, EMA5, EMA15, RSI3, RSI10,
Class)
#Create our data set
colnames(DataSet)<-c("MACDsignal", "SMI", "EMA5", "EMA15", "RSI3", "RSI10",
"Class")
#Name the columns
DataSet <- DataSet[-c(1:33),]
#Get rid of the data where the indicators are being calculated
TrainingSet <- DataSet[1:312,]
#Use 2/3 of the data to build the tree
TestSet <- DataSet[313:469,]
#And leave out 1/3 data to test our strategy
DecisionTree<-rpart(Class~MACDsignal + SMI + EMA5 + EMA15 + RSI3 +  RSI10,
data=TrainingSet, cp=.001)
prp(DecisionTree,type=2,extra=8)
printcp(DecisionTree)
#shows the minimal cp for each trees of each size.
plotcp(DecisionTree,upper="splits")
#plots the average geometric mean for trees of each size.
PrunedDecisionTree <- prune(DecisionTree, cp = 0.0396825)
# Selecting the complexity parameter (cp) that has the lowest cross-validated error (xerror)
prp(PrunedDecisionTree, type=2, extra=8)
table(predict(PrunedDecisionTree,TestSet,type="class"),TestSet[, 7],dnn=list('predicted','actual'))
